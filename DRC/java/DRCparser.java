
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Mar 20 19:19:45 EST 2006
//----------------------------------------------------

package edu.gsu.cs.drc;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Mon Mar 20 19:19:45 EST 2006
  */
public class DRCparser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DRCparser() {super();}

  /** Constructor which sets the default scanner. */
  public DRCparser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\003\007\000\002\002\004\000\002\007" +
    "\003\000\002\007\005\000\002\004\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\006\000\002\004\011\000" +
    "\002\004\011\000\002\005\006\000\002\005\005\000\002" +
    "\006\003\000\002\006\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\004\010\004\001\002\000\004\023\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\010\004\uffff\005\uffff\007\uffff\001\002\000\006\004" +
    "\011\005\012\001\002\000\004\023\060\001\002\000\014" +
    "\006\021\017\014\021\015\022\013\023\022\001\002\000" +
    "\016\004\ufff2\007\ufff2\011\ufff2\015\ufff2\016\ufff2\020\ufff2" +
    "\001\002\000\004\006\055\001\002\000\016\004\ufff1\007" +
    "\ufff1\011\ufff1\015\ufff1\016\ufff1\020\ufff1\001\002\000\012" +
    "\007\ufffd\011\ufffd\015\ufffd\016\ufffd\001\002\000\004\020" +
    "\053\001\002\000\010\011\052\015\041\016\042\001\002" +
    "\000\006\013\032\014\033\001\002\000\006\006\023\020" +
    "\ufff3\001\002\000\010\021\015\022\013\023\026\001\002" +
    "\000\006\004\027\007\030\001\002\000\006\004\ufff5\007" +
    "\ufff5\001\002\000\014\004\ufff3\007\ufff3\011\ufff3\015\ufff3" +
    "\016\ufff3\001\002\000\010\021\015\022\013\023\026\001" +
    "\002\000\012\007\ufff7\011\ufff7\015\ufff7\016\ufff7\001\002" +
    "\000\006\004\ufff4\007\ufff4\001\002\000\004\023\007\001" +
    "\002\000\004\023\007\001\002\000\006\004\011\007\035" +
    "\001\002\000\004\006\036\001\002\000\014\006\021\017" +
    "\014\021\015\022\013\023\022\001\002\000\010\007\040" +
    "\015\041\016\042\001\002\000\012\007\ufff8\011\ufff8\015" +
    "\ufff8\016\ufff8\001\002\000\014\006\021\017\014\021\015" +
    "\022\013\023\022\001\002\000\014\006\021\017\014\021" +
    "\015\022\013\023\022\001\002\000\012\007\ufffb\011\ufffb" +
    "\015\041\016\042\001\002\000\012\007\ufffc\011\ufffc\015" +
    "\041\016\042\001\002\000\006\004\011\007\046\001\002" +
    "\000\004\006\047\001\002\000\014\006\021\017\014\021" +
    "\015\022\013\023\022\001\002\000\010\007\051\015\041" +
    "\016\042\001\002\000\012\007\ufff9\011\ufff9\015\ufff9\016" +
    "\ufff9\001\002\000\004\002\001\001\002\000\010\021\015" +
    "\022\013\023\026\001\002\000\012\007\ufff6\011\ufff6\015" +
    "\ufff6\016\ufff6\001\002\000\014\006\021\017\014\021\015" +
    "\022\013\023\022\001\002\000\010\007\057\015\041\016" +
    "\042\001\002\000\012\007\ufffa\011\ufffa\015\ufffa\016\ufffa" +
    "\001\002\000\010\004\ufffe\005\ufffe\007\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\004\003\004\001\001\000\004\007\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\017\005" +
    "\015\010\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\023\010\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\044\001\001\000" +
    "\004\007\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\036\005\015\010\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\043\005\015\010\016" +
    "\001\001\000\010\004\042\005\015\010\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\047\005\015\010\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\053\001\001\000\002\001\001\000\010\004\055\005" +
    "\015\010\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DRCparser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DRCparser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DRCparser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 public LinkedList lst = new LinkedList(); 
 public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error");
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
      if (s.left >= 0) {                
        m.append(" in line "+(s.left+1));   
        if (s.right >= 0)                    
          m.append(", column "+(s.right+1));
      }
    }
    m.append(" : "+message);
    System.err.println(m);
  }
 public void report_fatal_error(String message, Object info) throws Exception {
    report_error(message, info);
    Exception e=null;
    throw e;
    //System.exit(1);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DRCparser$actions {
  private final DRCparser parser;

  /** Constructor */
  CUP$DRCparser$actions(DRCparser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DRCparser$do_action(
    int                        CUP$DRCparser$act_num,
    java_cup.runtime.lr_parser CUP$DRCparser$parser,
    java.util.Stack            CUP$DRCparser$stack,
    int                        CUP$DRCparser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DRCparser$result;

      /* select the action based on the action number */
      switch (CUP$DRCparser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Arg ::= NUMBER 
            {
              Vector RESULT = null;
		int xvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left;
		int xvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right;
		String xval = (String)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).value;
		
    Vector ov = new Vector();
    ov.addElement(xval);
    ov.addElement("num");
    RESULT = ov;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(6/*Arg*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Arg ::= STRING 
            {
              Vector RESULT = null;
		int svalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left;
		int svalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right;
		String sval = (String)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).value;
		
    Vector ov = new Vector();
    ov.addElement(sval);
    ov.addElement("str");
    RESULT = ov;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(6/*Arg*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Arg ::= NAME 
            {
              Vector RESULT = null;
		int nvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left;
		int nvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right;
		String nval = (String)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).value;
		
    Vector ov = new Vector();
    ov.addElement(nval);
    ov.addElement("col");
    RESULT = ov;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(6/*Arg*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ArgList ::= ArgList COMMA Arg 
            {
              Vector RESULT = null;
		int alvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).left;
		int alvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).right;
		Vector alval = (Vector)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).value;
		int avalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left;
		int avalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right;
		Vector aval = (Vector)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).value;
		 
    alval.addElement(aval);
    RESULT = alval;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(4/*ArgList*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ArgList ::= Arg 
            {
              Vector RESULT = null;
		int avalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left;
		int avalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right;
		Vector aval = (Vector)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).value;
		 
    Vector v = new Vector();
    v.addElement(aval);
    RESULT = v;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(4/*ArgList*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AtomicFormula ::= Arg COMPARISON Arg 
            {
              DRCNode RESULT = null;
		int aval1left = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).left;
		int aval1right = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).right;
		Vector aval1 = (Vector)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).value;
		int cvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).left;
		int cvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).right;
		String cval = (String)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).value;
		int aval2left = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left;
		int aval2right = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right;
		Vector aval2 = (Vector)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).value;
		
    DRCNode rnode = new DRCNode();
    rnode.setRnodetype("comp");
    rnode.addLeftOperand((String)aval1.get(0));
    rnode.addLeftDataType((String)aval1.get(1));
    rnode.addOperator(cval);
    rnode.addRightOperand((String)aval2.get(0));
    rnode.addRightDataType((String)aval2.get(1));
    RESULT = rnode;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(3/*AtomicFormula*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AtomicFormula ::= NAME LPAREN ArgList RPAREN 
            {
              DRCNode RESULT = null;
		int nvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-3)).left;
		int nvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-3)).right;
		String nval = (String)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-3)).value;
		int alvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).left;
		int alvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).right;
		Vector alval = (Vector)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).value;
		
    DRCNode rnode = new DRCNode();
    rnode.setRnodetype("predicate");
    rnode.setRelationName(nval);
    rnode.setArguments(alval);
    RESULT = rnode;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(3/*AtomicFormula*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Formula ::= LPAREN FORALL VarList RPAREN LPAREN Formula RPAREN 
            {
              DRCNode RESULT = null;
		int vlvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-4)).left;
		int vlvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-4)).right;
		Vector vlval = (Vector)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-4)).value;
		int fvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).left;
		int fvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).right;
		DRCNode fval = (DRCNode)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).value;
		
    DRCNode rnode = new DRCNode();
    DRCNode rnode2 = new DRCNode();
    DRCNode rnode3 = new DRCNode();
    rnode3.setRnodetype("not");
    rnode3.setLchild(fval);
    rnode2.setRnodetype("exists");
    rnode2.setVarlist(vlval);
    rnode2.setLchild(rnode3);
    rnode.setRnodetype("not");
    rnode.setLchild(rnode2);
    RESULT = rnode;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(2/*Formula*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-6)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Formula ::= LPAREN EXISTS VarList RPAREN LPAREN Formula RPAREN 
            {
              DRCNode RESULT = null;
		int vlvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-4)).left;
		int vlvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-4)).right;
		Vector vlval = (Vector)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-4)).value;
		int fvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).left;
		int fvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).right;
		DRCNode fval = (DRCNode)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).value;
		
    DRCNode rnode = new DRCNode();
    rnode.setRnodetype("exists");
    rnode.setVarlist(vlval);
    rnode.setLchild(fval);
    RESULT = rnode;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(2/*Formula*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-6)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Formula ::= NOT LPAREN Formula RPAREN 
            {
              DRCNode RESULT = null;
		int fvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).left;
		int fvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).right;
		DRCNode fval = (DRCNode)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).value;
		 
    DRCNode rnode = new DRCNode();
    rnode.setRnodetype("not");
    rnode.setLchild(fval);
    RESULT = rnode;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(2/*Formula*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Formula ::= Formula OR Formula 
            {
              DRCNode RESULT = null;
		int fval1left = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).left;
		int fval1right = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).right;
		DRCNode fval1 = (DRCNode)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).value;
		int fval2left = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left;
		int fval2right = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right;
		DRCNode fval2 = (DRCNode)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).value;
		
    DRCNode rnode = new DRCNode();
    rnode.setRnodetype("or");
    rnode.setLchild(fval1);
    rnode.setRchild(fval2);
    RESULT = rnode;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(2/*Formula*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Formula ::= Formula AND Formula 
            {
              DRCNode RESULT = null;
		int fval1left = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).left;
		int fval1right = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).right;
		DRCNode fval1 = (DRCNode)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).value;
		int fval2left = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left;
		int fval2right = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right;
		DRCNode fval2 = (DRCNode)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).value;
		
    DRCNode rnode = new DRCNode();
    rnode.setRnodetype("and");
    rnode.setLchild(fval1);
    rnode.setRchild(fval2);
    RESULT = rnode;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(2/*Formula*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Formula ::= AtomicFormula 
            {
              DRCNode RESULT = null;
		int atvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left;
		int atvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right;
		DRCNode atval = (DRCNode)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).value;
		 
    RESULT = atval; 
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(2/*Formula*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarList ::= VarList COMMA NAME 
            {
              Vector RESULT = null;
		int vlvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).left;
		int vlvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).right;
		Vector vlval = (Vector)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).value;
		int nvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left;
		int nvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right;
		String nval = (String)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).value;
		 
    vlval.addElement(nval);
    RESULT = vlval;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(5/*VarList*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarList ::= NAME 
            {
              Vector RESULT = null;
		int nvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left;
		int nvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right;
		String nval = (String)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).value;
		 
    Vector v = new Vector();
    v.addElement(nval);
    RESULT = v;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(5/*VarList*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Query EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).right;
		DRCNode start_val = (DRCNode)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).value;
		RESULT = start_val;
              CUP$DRCparser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$DRCparser$parser.done_parsing();
          return CUP$DRCparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Query ::= LBRACE VarList BAR Formula RBRACE 
            {
              DRCNode RESULT = null;
		int vlvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-3)).left;
		int vlvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-3)).right;
		Vector vlval = (Vector)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-3)).value;
		int fvalleft = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).left;
		int fvalright = ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).right;
		DRCNode fval = (DRCNode)((java_cup.runtime.Symbol) CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-1)).value;
		
    DRCNode rnode = new DRCNode();
    rnode.setRnodetype("query");
    rnode.setVarlist(vlval);
    rnode.setLchild(fval);
    RESULT = rnode;
  
              CUP$DRCparser$result = new java_cup.runtime.Symbol(1/*Query*/, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DRCparser$stack.elementAt(CUP$DRCparser$top-0)).right, RESULT);
            }
          return CUP$DRCparser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

